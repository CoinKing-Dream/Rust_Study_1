use std::io;

macro_rules! parse_input {
    ($x:expr, $t:ident) => ($x.trim().parse::<$t>().unwrap())
}

fn calculate_area_and_perimeter(dimensions: (u32, u32)) -> (f32, f32) {
    let min_len: f32 = {
        if dimensions.0 > dimensions.1 {dimensions.1 as f32} 
        else {dimensions.0 as f32}
    } ;
    let r: f32 = min_len as f32 / 2.0;
    return (3.14*r*r, 2.0*3.14*r);
}

fn main() {
    let mut input_line = String::new();
    io::stdin().read_line(&mut input_line).unwrap();
    let n = parse_input!(input_line, i32);
    let mut ans: Vec<(f32, f32)> = Vec::new();
    
    for i in 0..n {
        let mut input_line = String::new();
        io::stdin().read_line(&mut input_line).unwrap();
        let line = input_line.trim_matches('\n').to_string();
        
        let val: Vec<&str> = line.split_whitespace().collect();
        let a = val[0].parse::<u32>().unwrap();
        let b = val[1].parse::<u32>().unwrap();

        let res: (f32, f32) = calculate_area_and_perimeter((a,b));
        ans.push(res);
    }
    for i in 0..n as usize {
        println!("{} {}", ans[i].0, ans[i].1);
    }
}
